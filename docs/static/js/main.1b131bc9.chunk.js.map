{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handleChange","ev","console","log","target","value","setState","name","handleSubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","React","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","key","App","datos","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b131bc9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header =({titulo}) => (\n<header>\n<h1 className=\"text-center\">{titulo}</h1>\n</header>\n\n\n);\n\nexport default Header;\n\n\n","import React from 'react';\nimport uuid from 'uuid';\n\n\nconst stateInicial = {\n  cita: {\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  },\n  error: false\n}\n\nclass NuevaCita extends React.Component {\n  state = { ...stateInicial }\n  handleChange = ev => {\n\n    console.log(ev.target.value);\n    this.setState({\n      cita: {\n        ...this.state.cita,\n        [ev.target.name]: ev.target.value\n      }\n    })\n  }\n\n  handleSubmit = ev => {\n    ev.preventDefault();\n\n    const { mascota, propietario, fecha, hora, sintomas } = this.state.cita;\n\n    if (mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\n      this.setState({\n        error: true\n      });\n      return;\n    }\n    const nuevaCita = { ...this.state.cita };\n    nuevaCita.id = uuid();\n    this.props.crearNuevaCita(nuevaCita)\n    this.setState({\n      ...stateInicial\n    })\n  }\n  render() {\n    const { error } = this.state;\n    return (\n\n      <div className=\"card mt-5 py-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center mb-5\">Rellena el formulario para una nueva cita</h2>\n          {error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">Todos los campos son obligatorios</div> : null}\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre mascota\"\n                  name=\"mascota\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.mascota} />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre Dueño Mascota\"\n                  name=\"propietario\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.propietario} />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\n              <div className=\"col-sm-8 col-lg-4\">\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  name=\"fecha\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.fecha} />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n              <div className=\"col-sm-8 col-lg-4\">\n                <input\n                  type=\"time\"\n                  className=\"form-control\"\n                  name=\"hora\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.hora} />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Síntomas</label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <textarea\n                  className=\"form-control\"\n                  name=\"sintomas\"\n                  placeholder=\"Describe los síntomas\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.sintomas}>\n\n                </textarea>\n\n              </div>\n\n            </div>\n            <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar nueva cita\" />\n\n          </form>\n        </div>\n      </div >\n    )\n  }\n}\n\nexport default NuevaCita;","import React from 'react';\n\nconst Cita = ({ cita, eliminarCita}) => (\n    <div className=\"media mt-3\">\n        <div className=\"media-body\">\n            <h3 className=\"mt-0\">{cita.mascota}</h3>\n            <p className=\"card-text\"><span>Nombre Dueño: </span>{cita.propietario}</p>\n            <p className=\"card-text\"><span>Fecha: </span>{cita.fecha}</p>\n            <p className=\"card-text\"><span>Hora: </span>{cita.hora}</p>\n            <p className=\"card-text\"><span>Síntomas: </span>{cita.sintomas}</p>\n\n            <button\n                className=\"btn btn-danger\"\n                onClick={() => eliminarCita(cita.id)}\n            >Borrar &times;</button>\n\n        </div>\n    </div>\n)\n\nexport default Cita;","import React from 'react';\nimport Cita from './Cita';\n\n\n\nconst ListaCitas = ({ citas, eliminarCita}) => {\n\n    const mensaje = Object.keys(citas).length === 0 ? 'No hay citas' : 'Administra las citas aqui';\n\n    return(\n\n    <div className=\"card mt-2 py-5\">\n        <div className=\"card-body\">\n            <h2 className=\"card-title text-center\">{mensaje}</h2>\n            <div className=\"lista-citas\">\n                {citas.map(cita => (\n                    <Cita\n                        key={cita.id}\n                        cita={cita}\n                        eliminarCita={eliminarCita}\n                    />\n\n                ))}\n            </div>\n        </div>\n    </div>\n    );\n\n}\n\n\n\n\n\n\n\nexport default ListaCitas;","import React from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header';\nimport NuevaCita from './components/NuevaCita';\nimport ListaCitas from './components/ListaCitas';\nclass App extends React.Component {\n\n  state = {\n    citas: []\n  }\n\n  componentDidMount() {\n    const citasLS = localStorage.getItem('citas');\n    if (citasLS) {\n      this.setState({\n        citas: JSON.parse(citasLS)\n      })\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('citas', JSON.stringify(this.state.citas));\n  }\n\n  crearNuevaCita = datos => {\n    const citas = [...this.state.citas, datos];\n\n    this.setState({\n      citas\n    });\n\n  }\n\n  eliminarCita = id => {\n    const citasActuales = [...this.state.citas];\n    const citas = citasActuales.filter(cita => cita.id !== id)\n    this.setState({\n      citas\n    })\n\n  }\n  render() {\n\n\n    return (\n      <div className=\"container\">\n        <Header\n          titulo='Administrador Pacientes Veterinaria' />\n\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <NuevaCita\n              crearNuevaCita={this.crearNuevaCita}\n            />\n          </div>\n          <div className=\"mt-5 col-md-10 mx-auto\">\n            <ListaCitas\n              citas={this.state.citas}\n              eliminarCita={this.eliminarCita}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}